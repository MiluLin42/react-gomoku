{"version":3,"sources":["App/Square.js","App/App.js","index.js"],"names":["SquareField","styled","button","PiecePlayer","div","props","$color","Square","x","y","blackIsNext","winner","handlePieceClick","useState","color","setColor","onClick","current","BoardContainer","BoardRow","Title","h1","GameStatus","GameResult","BoardField","RestartButton","Board","Array","fill","grid","setGrid","setWinner","useRef","currentX","currentY","map","row","col","countPiece","directionX","directionY","totalPieces","findX","findY","useEffect","calWinner","window","location","reload","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.582df955.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst SquareField = styled.button`\n  background: #fff;\n  border: 1px solid #999;\n  float: left;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  height: 34px;\n  margin-right: -1px;\n  margin-top: -1px;\n  padding: 0;\n  text-align: center;\n  width: 34px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst PiecePlayer = styled.div`\n  box-sizeing: border-box;\n  z-index: 1;\n  width: 85%;\n  height: 85%;\n  transform: scale(0.95);\n  border-radius: 50%;\n  cursor: pointer;\n\n  ${(props) =>\n    props.$color === \"black\" &&\n    `\n    background : black;\n    border: 2px solid black;\n  `}\n  ${(props) =>\n    props.$color === \"white\" &&\n    `\n    background : white;\n    border: 2px solid black;\n  `};\n`;\n\nexport default function Square({\n  x,\n  y,\n  blackIsNext,\n  winner,\n  handlePieceClick,\n}) {\n  const [color, setColor] = useState(null);\n\n  function handleClick() {\n    if (color) return;\n    if (winner) return;\n    blackIsNext.current ? setColor(\"white\") : setColor(\"black\");\n    blackIsNext.current = !blackIsNext.current;\n    handlePieceClick(x, y);\n  }\n  return (\n    <SquareField onClick={handleClick}>\n      <PiecePlayer $color={color} />\n    </SquareField>\n  );\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Square from \"./Square\";\n\nconst BoardContainer = styled.div`\n  display: flex;\n  margin: 20px 50px;\n`;\n\nconst BoardRow = styled.div`\n  &:after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n`;\n\nconst Title = styled.h1``;\nconst GameStatus = styled.div``;\n\nconst GameResult = styled.div`\n  margin-left: 20px;\n  border: 1px solid;\n  padding: 8px;\n  border-radius: 8px;\n`;\n\nconst BoardField = styled.div`\n  margin-left: 20px;\n`;\n\nconst RestartButton = styled.button`\n  margin-left: 20px;\n  margin-top: 20px;\n  padding: 8px;\n  cursor: pointer;\n`;\n\nconst BoardSize = 19;\n\nfunction Board() {\n  const [grid, setGrid] = useState(\n    Array(BoardSize).fill(Array(BoardSize).fill(null))\n  );\n  const [winner, setWinner] = useState(null);\n  const blackIsNext = useRef(false);\n  const currentX = useRef();\n  const currentY = useRef();\n\n  function handlePieceClick(x, y) {\n    currentX.current = x;\n    currentY.current = y;\n    updateBoard();\n  }\n\n  function updateBoard() {\n    setGrid((grid) => {\n      return grid.map((row, y) => {\n        if (y !== currentY.current) return row;\n        return row.map((col, x) => {\n          if (x !== currentX.current) return col;\n          return (x = blackIsNext.current ? \"black\" : \"white\");\n        });\n      });\n    });\n  }\n\n  useEffect(() => {\n    if (!currentX.current && !currentY.current) return;\n    calWinner(grid, currentX.current, currentY.current);\n\n    function calWinner(grid, x, y) {\n      if (\n        countPiece(grid, x, y, -1, 0) + countPiece(grid, x, y, 1, 0) >= 4 ||\n        countPiece(grid, x, y, 0, -1) + countPiece(grid, x, y, 0, 1) >= 4 ||\n        countPiece(grid, x, y, 1, 1) + countPiece(grid, x, y, -1, -1) >= 4 ||\n        countPiece(grid, x, y, -1, 1) + countPiece(grid, x, y, 1, -1) >= 4\n      ) {\n        return setWinner(grid[y][x]);\n      }\n    }\n  }, [grid]);\n\n  function countPiece(grid, x, y, directionX, directionY) {\n    let totalPieces = 0;\n    let findX = x + directionX;\n    let findY = y + directionY;\n\n    while (grid[findY] && grid[findY][findX] === grid[y][x]) {\n      findX = findX + directionX;\n      findY = findY + directionY;\n      totalPieces++;\n    }\n    return totalPieces;\n  }\n\n  function handleRestartClick() {\n    window.location.reload();\n  }\n\n  return (\n    <BoardContainer>\n      <Title>五子棋</Title>\n      <BoardField>\n        {grid.map((row, y) => {\n          return (\n            <BoardRow key={y}>\n              {row.map((col, x) => {\n                return (\n                  <Square\n                    key={x}\n                    x={x}\n                    y={y}\n                    blackIsNext={blackIsNext}\n                    handlePieceClick={handlePieceClick}\n                    winner={winner}\n                  />\n                );\n              })}\n            </BoardRow>\n          );\n        })}\n      </BoardField>\n      <GameStatus>\n        {(winner && <GameResult>贏家: {winner}</GameResult>) ||\n          (!winner && (\n            <GameResult>\n              Next Player: {blackIsNext.current ? \"White\" : \"Black\"}\n            </GameResult>\n          ))}\n        <RestartButton onClick={handleRestartClick}>重新開始遊戲</RestartButton>\n      </GameStatus>\n    </BoardContainer>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}